#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de v√©rification en conditions r√©elles de combat - VERSION AM√âLIOR√âE
Teste l'utilisation r√©elle des capacit√©s, effets, cooldowns et interactions
Utilise les vraies unit√©s du jeu avec validation compl√®te
"""

import json
import sys
import os
import traceback
from typing import Dict, List, Any, Optional
import random
import time

# Ajout du r√©pertoire parent au path pour les imports
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from Engine.engine import CombatEngine, Player
    from Engine.models import Hero, Unit, Card, Ability
    from Engine.effects_database_manager import EffectsDatabaseManager
    from Engine.deck_manager import DeckManager
    from Engine.hero_customization_manager import HeroCustomizationManager
except ImportError as e:
    print(f"‚ùå Erreur d'import: {e}")
    print("Assurez-vous d'√™tre dans le bon r√©pertoire")
    sys.exit(1)

class AdvancedCombatTester:
    def __init__(self):
        self.results = {
            "success": [],
            "errors": [],
            "warnings": [],
            "combat_tests": [],
            "effect_validations": [],
            "cooldown_resets": [],
            "stats": {
                "total_abilities_tested": 0,
                "successful_uses": 0,
                "failed_uses": 0,
                "combat_simulations": 0,
                "effects_validated": 0,
                "cooldowns_reset": 0
            }
        }
        
        # Chargement des donn√©es
        self.load_data()
        
    def load_data(self):
        """Charge toutes les donn√©es n√©cessaires"""
        try:
            print("üìÇ Chargement des donn√©es...")
            
            # Chargement de la base de donn√©es des effets
            self.effects_db = EffectsDatabaseManager()
            
            # Chargement des donn√©es JSON
            with open('Data/effects_database.json', 'r', encoding='utf-8') as f:
                self.effects_data = json.load(f)
            
            with open('Data/heroes.json', 'r', encoding='utf-8') as f:
                self.heroes_data = json.load(f)
            
            with open('Data/units.json', 'r', encoding='utf-8') as f:
                self.units_data = json.load(f)
            
            with open('Data/cards.json', 'r', encoding='utf-8') as f:
                self.cards_data = json.load(f)
                
            print("‚úÖ Donn√©es charg√©es avec succ√®s")
            print(f"üìä Donn√©es charg√©es: {len(self.effects_data.get('abilities', {}))} capacit√©s, {len(self.units_data)} unit√©s, {len(self.heroes_data)} h√©ros")
            
        except Exception as e:
            print(f"‚ùå Erreur lors du chargement des donn√©es: {e}")
            traceback.print_exc()
            sys.exit(1)
    
    def _iter_entities(self, data):
        """Permet d'it√©rer sur des donn√©es JSON qui peuvent √™tre une liste ou un dict."""
        if isinstance(data, dict):
            return data.values()
        if isinstance(data, list):
            return data
        return []
    
    def create_real_units_for_testing(self):
        """Cr√©e des unit√©s r√©elles du jeu pour les tests"""
        real_units = []
        
        # R√©cup√©ration des unit√©s avec des capacit√©s
        for unit_data in self._iter_entities(self.units_data):
            if isinstance(unit_data, dict) and "ability_ids" in unit_data and unit_data["ability_ids"]:
                try:
                    # Cr√©ation de l'unit√© avec ses vraies capacit√©s
                    ability_ids = unit_data.get('ability_ids', [])
                    
                    # Convertir les IDs de capacit√©s en objets Ability
                    abilities = []
                    for ability_id in ability_ids:
                        if str(ability_id) in self.effects_data.get("abilities", {}):
                            ability_data = self.effects_data["abilities"][str(ability_id)]
                            ability = Ability(
                                name=ability_data.get('name', f'Ability {ability_id}'),
                                description=ability_data.get('description', ''),
                                cooldown=ability_data.get('base_cooldown', 0)
                            )
                            # Ajouter les propri√©t√©s suppl√©mentaires CRUCIALES
                            ability.damage = ability_data.get('damage', 0)
                            ability.target_type = ability_data.get('target_type', 'single_enemy')
                            ability.element = ability_data.get('element', '1')
                            ability.ability_id = str(ability_id)
                            ability.current_cooldown = 0
                            abilities.append(ability)
                        else:
                            # Cr√©er une capacit√© par d√©faut si l'ID n'est pas trouv√©
                            ability = Ability(
                                name=f'Ability {ability_id}',
                                description='Capacit√© par d√©faut',
                                cooldown=0
                            )
                            ability.damage = 10
                            ability.target_type = 'single_enemy'
                            ability.element = '1'
                            ability.ability_id = str(ability_id)
                            ability.current_cooldown = 0
                            abilities.append(ability)
                    
                    unit = Unit(
                        name=unit_data.get('name', 'Unit√© inconnue'),
                        element=unit_data.get('element', '1'),
                        stats={
                            'hp': unit_data.get('hp', 100),
                            'attack': unit_data.get('attack', 20),
                            'defense': unit_data.get('defense', 10)
                        },
                        abilities=abilities
                    )
                    
                    # Remplacer la liste d'IDs par la liste d'objets Ability
                    unit.abilities = abilities
                    
                    # Ajout des donn√©es suppl√©mentaires
                    unit.rarity = unit_data.get('rarity', 'Commun')
                    unit.image_path = unit_data.get('image_path', 'Crea/default.png')
                    
                    real_units.append(unit)
                    print(f"‚úÖ Unit√© cr√©√©e: {unit.name} (ID: {unit_data.get('id', 'N/A')}) - {len(unit.abilities)} capacit√©s")
                    
                except Exception as e:
                    print(f"‚ùå Erreur cr√©ation unit√© {unit_data.get('name', 'N/A')}: {e}")
                    import traceback
                    traceback.print_exc()
                    self.results["errors"].append(f"Erreur cr√©ation unit√© {unit_data.get('name', 'N/A')}: {e}")
        
        print(f"üìä {len(real_units)} unit√©s r√©elles cr√©√©es pour les tests")
        return real_units
    
    def create_real_heroes_for_testing(self):
        """Cr√©e des h√©ros r√©els du jeu pour les tests"""
        real_heroes = []
        
        for hero_data in self._iter_entities(self.heroes_data):
            if isinstance(hero_data, dict):
                try:
                    # Cr√©ation du h√©ros avec ses vraies stats
                    hero = Hero(
                        name=hero_data.get('name', 'H√©ros inconnu'),
                        element=hero_data.get('element', '1'),
                        base_stats={
                            'hp': hero_data.get('hp', 1000),
                            'attack': hero_data.get('attack', 50),
                            'defense': hero_data.get('defense', 20)
                        },
                        ability_name=hero_data.get('ability_name', ''),
                        ability_description=hero_data.get('ability_description', ''),
                        ability_cooldown=hero_data.get('ability_cooldown', 0)
                    )
                    
                    # Ajout des donn√©es suppl√©mentaires
                    hero.rarity = hero_data.get('rarity', 'Commun')
                    hero.image_path = hero_data.get('image_path', 'Hero/1.png')
                    hero.passive = hero_data.get('passive', '')
                    
                    real_heroes.append(hero)
                    print(f"‚úÖ H√©ros cr√©√©: {hero.name} (ID: {hero_data.get('id', 'N/A')})")
                    
                except Exception as e:
                    self.results["errors"].append(f"Erreur cr√©ation h√©ros {hero_data.get('name', 'N/A')}: {e}")
        
        print(f"üìä {len(real_heroes)} h√©ros r√©els cr√©√©s pour les tests")
        return real_heroes
    
    def force_reset_all_cooldowns(self, combat_engine, all_units):
        """AM√âLIORATION : Force la r√©initialisation de TOUS les cooldowns de mani√®re agressive"""
        try:
            print("üîÑ R√©initialisation agressive des cooldowns...")
            
            # 1. R√©initialiser le dictionnaire complet du moteur
            if hasattr(combat_engine, 'unit_cooldowns'):
                combat_engine.unit_cooldowns = {}
                print("   ‚úÖ Dictionnaire unit_cooldowns vid√©")
            
            # 2. R√©initialiser tous les objets Ability
            for unit in all_units:
                for ability in unit.abilities:
                    ability.current_cooldown = 0
                    if hasattr(ability, 'cooldown'):
                        ability.cooldown = 0
                
                # 3. R√©initialiser les attributs de cooldown des unit√©s
                if hasattr(unit, 'ability_cooldowns'):
                    unit.ability_cooldowns = {}
                if hasattr(unit, 'cooldowns'):
                    unit.cooldowns = {}
            
            # 4. R√©initialiser les cooldowns des h√©ros
            if hasattr(combat_engine, 'player1') and hasattr(combat_engine.player1, 'hero'):
                if hasattr(combat_engine.player1.hero, 'ability'):
                    combat_engine.player1.hero.ability.current_cooldown = 0
            
            if hasattr(combat_engine, 'player2') and hasattr(combat_engine.player2, 'hero'):
                if hasattr(combat_engine.player2.hero, 'ability'):
                    combat_engine.player2.hero.ability.current_cooldown = 0
            
            # 5. Appeler la m√©thode de r√©initialisation du moteur si elle existe
            if hasattr(combat_engine, 'reset_all_cooldowns'):
                combat_engine.reset_all_cooldowns()
                print("   ‚úÖ M√©thode reset_all_cooldowns appel√©e")
            
            self.results["stats"]["cooldowns_reset"] += 1
            print("   ‚úÖ R√©initialisation agressive termin√©e")
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è Erreur lors de la r√©initialisation: {e}")
            self.results["warnings"].append(f"Erreur r√©initialisation cooldowns: {e}")
    
    def validate_effects_application(self, target, ability_data, target_hp_before, target_hp_after):
        """AM√âLIORATION : Valide que les effets sont r√©ellement appliqu√©s"""
        try:
            effects_applied = []
            effects_validated = 0
            
            # 1. V√©rifier les changements de HP
            hp_change = target_hp_before - target_hp_after
            if hp_change > 0:
                effects_applied.append(f"D√©g√¢ts: {hp_change}")
                effects_validated += 1
            
            # 2. V√©rifier les effets temporaires
            if hasattr(target, 'temporary_effects') and target.temporary_effects:
                for effect in target.temporary_effects:
                    effects_applied.append(f"Effet temporaire: {effect.get('type', 'unknown')}")
                    effects_validated += 1
            
            # 3. V√©rifier les effets de base de la capacit√©
            if "effects" in ability_data:
                for effect in ability_data["effects"]:
                    effects_applied.append(f"Effet: {effect.get('effect', 'unknown')}")
                    effects_validated += 1
            
            # 4. V√©rifier les effets √©l√©mentaires
            if "elemental_effects" in ability_data:
                for effect in ability_data["elemental_effects"]:
                    effects_applied.append(f"Effet √©l√©mentaire: {effect.get('effect', 'unknown')}")
                    effects_validated += 1
            
            # 5. V√©rifier les effets de cha√Æne
            if "chain_effects" in ability_data:
                for effect in ability_data["chain_effects"]:
                    effects_applied.append(f"Effet de cha√Æne: {effect.get('effect', 'unknown')}")
                    effects_validated += 1
            
            # Enregistrer la validation
            self.results["effect_validations"].append({
                "target": target.name,
                "ability": ability_data.get('name', 'Unknown'),
                "effects_count": effects_validated,
                "effects_list": effects_applied,
                "hp_change": hp_change
            })
            
            self.results["stats"]["effects_validated"] += 1
            
            return effects_applied, effects_validated
            
        except Exception as e:
            self.results["warnings"].append(f"Erreur validation effets: {e}")
            return ["Erreur validation effets"], 0
    
    def test_ability_usage_in_combat(self, unit, ability_input, combat_engine, target_units=None):
        """Teste l'utilisation r√©elle d'une capacit√© en combat avec validation compl√®te"""
        try:
            # G√©rer les deux cas : ability_input peut √™tre un ID (str/int) ou un objet Ability
            if isinstance(ability_input, Ability):
                ability_obj = ability_input
                ability_id = ability_obj.name
                ability_data = {
                    'name': ability_obj.name,
                    'description': ability_obj.description,
                    'base_cooldown': ability_obj.cooldown,
                    'damage': ability_obj.damage,
                    'target_type': ability_obj.target_type,
                    'element': ability_obj.element
                }
            else:
                ability_id = str(ability_input)
                if ability_id not in self.effects_data.get("abilities", {}):
                    self.results["errors"].append(f"Capacit√© {ability_id} non trouv√©e pour {unit.name}")
                    return False
                ability_data = self.effects_data["abilities"][ability_id]
                ability_obj = None
            
            # V√©rifier si l'unit√© peut utiliser la capacit√© (cooldown)
            if hasattr(combat_engine, 'can_use_ability'):
                if ability_obj:
                    can_use = combat_engine.can_use_ability(unit, ability_obj)
                else:
                    temp_ability = Ability(
                        name=ability_data.get('name', f'Ability {ability_id}'),
                        description=ability_data.get('description', ''),
                        cooldown=ability_data.get('base_cooldown', 0)
                    )
                    temp_ability.ability_id = ability_id
                    can_use = combat_engine.can_use_ability(unit, temp_ability)
                
                if not can_use:
                    self.results["warnings"].append(f"{unit.name} ne peut pas utiliser {ability_data.get('name', ability_id)} (cooldown)")
                    return False
            
            # V√©rifications de la capacit√©
            required_fields = ["name", "element", "base_cooldown", "target_type"]
            for field in required_fields:
                if field not in ability_data:
                    self.results["errors"].append(f"Capacit√© {ability_id} ({unit.name}): champ '{field}' manquant")
                    return False
            
            # G√©rer le champ damage_type manquant
            if "damage_type" not in ability_data:
                element = ability_data.get("element", "1")
                if element in ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"]:
                    ability_data["damage_type"] = "magical"
                else:
                    ability_data["damage_type"] = "physical"
                self.results["warnings"].append(f"Capacit√© {ability_id} ({unit.name}): damage_type ajout√© automatiquement ({ability_data['damage_type']})")
            
            # Test d'utilisation r√©elle de la capacit√©
            if target_units and hasattr(combat_engine, 'use_ability'):
                try:
                    target = self.select_appropriate_target(unit, ability_data.get("target_type", "single_enemy"), target_units, combat_engine)
                    
                    if target:
                        # Sauvegarder les stats avant utilisation
                        target_hp_before = target.hp
                        unit_hp_before = unit.hp
                        target_effects_before = len(target.temporary_effects) if hasattr(target, 'temporary_effects') else 0
                        
                        # Utiliser la capacit√©
                        try:
                            if ability_obj:
                                success = combat_engine.use_ability(unit, ability_obj, target)
                            else:
                                ability_obj = Ability(
                                    name=ability_data.get('name', f'Ability {ability_id}'),
                                    description=ability_data.get('description', ''),
                                    cooldown=ability_data.get('base_cooldown', 0)
                                )
                                ability_obj.damage = ability_data.get('damage', 0)
                                ability_obj.target_type = ability_data.get('target_type', 'single_enemy')
                                ability_obj.element = ability_data.get('element', '1')
                                ability_obj.ability_id = ability_id
                                success = combat_engine.use_ability(unit, ability_obj, target)
                        except Exception as use_error:
                            self.results["warnings"].append(f"Erreur utilisation {ability_data.get('name', ability_id)} sur {target.name}: {use_error}")
                            try:
                                success = combat_engine.use_ability(unit, ability_obj, unit)
                                target = unit
                                target_hp_before = unit.hp
                            except Exception as fallback_error:
                                self.results["warnings"].append(f"√âchec fallback pour {ability_data.get('name', ability_id)}: {fallback_error}")
                                success = False
                        
                        if success:
                            # V√©rifier les effets appliqu√©s
                            target_hp_after = target.hp
                            unit_hp_after = unit.hp
                            target_effects_after = len(target.temporary_effects) if hasattr(target, 'temporary_effects') else 0
                            
                            # Analyser les changements
                            hp_change = target_hp_before - target_hp_after
                            unit_hp_change = unit_hp_before - unit_hp_after
                            effects_change = target_effects_after - target_effects_before
                            
                            # VALIDATION DES EFFETS
                            effects_applied, effects_validated = self.validate_effects_application(target, ability_data, target_hp_before, target_hp_after)
                            
                            self.results["combat_tests"].append({
                                "unit": unit.name,
                                "ability": ability_data.get('name', ability_id),
                                "ability_id": ability_id,
                                "status": "success",
                                "target_type": ability_data.get('target_type', 'single_enemy'),
                                "target": target.name,
                                "damage": ability_data.get('damage', 0),
                                "cooldown": ability_data.get('base_cooldown', 0),
                                "hp_change": hp_change,
                                "effects_applied": effects_applied,
                                "effects_validated": effects_validated,
                                "real_usage": True
                            })
                            
                            print(f"    ‚úÖ Utilisation r√©ussie - Cible: {target.name}, D√©g√¢ts: {hp_change}, Effets valid√©s: {effects_validated}")
                            return True
                        else:
                            self.results["warnings"].append(f"√âchec de l'utilisation de {ability_data.get('name', ability_id)} par {unit.name}")
                            return False
                    else:
                        self.results["warnings"].append(f"Aucune cible appropri√©e trouv√©e pour {ability_data.get('name', ability_id)}")
                        return False
                        
                except Exception as e:
                    self.results["errors"].append(f"Erreur lors de l'utilisation de {ability_id} ({unit.name}): {e}")
                    return False
            
            # Fallback si pas d'utilisation r√©elle possible
            self.results["combat_tests"].append({
                "unit": unit.name,
                "ability": ability_data.get('name', ability_id),
                "ability_id": ability_id,
                "status": "validated",
                "target_type": ability_data.get('target_type', 'single_enemy'),
                "damage": ability_data.get('damage', 0),
                "cooldown": ability_data.get('base_cooldown', 0),
                "real_usage": False
            })
            
            return True
            
        except Exception as e:
            self.results["errors"].append(f"Erreur test capacit√© {ability_id} ({unit.name}): {e}")
            return False
    
    def select_appropriate_target(self, unit, target_type, available_targets, combat_engine):
        """S√©lectionne une cible appropri√©e selon le type de cible"""
        try:
            if not available_targets:
                return None
            
            if target_type == "self":
                return unit
            elif target_type in ["single_enemy", "random_enemy"]:
                enemy_targets = [t for t in available_targets if t != unit and hasattr(t, 'hp') and t.hp > 0]
                if enemy_targets:
                    return random.choice(enemy_targets) if target_type == "random_enemy" else enemy_targets[0]
            elif target_type in ["single_ally", "random_ally"]:
                ally_targets = [t for t in available_targets if t != unit and hasattr(t, 'hp') and t.hp > 0]
                if ally_targets:
                    return random.choice(ally_targets) if target_type == "random_ally" else ally_targets[0]
            elif target_type in ["all_enemies", "all_allies", "front_row", "random_multiple", "self_and_allies", "chain_enemies", "chain_random"]:
                for target in available_targets:
                    if hasattr(target, 'hp') and target.hp > 0 and target != unit:
                        return target
            
            # Fallback final
            for target in available_targets:
                if hasattr(target, 'hp') and target.hp > 0 and target != unit:
                    return target
            
            return unit
                
        except Exception as e:
            self.results["warnings"].append(f"Erreur s√©lection cible: {e}")
            return available_targets[0] if available_targets else None
    
    def simulate_combat_scenario(self, units_p1, units_p2, heroes_p1, heroes_p2):
        """Simule un sc√©nario de combat complet avec utilisation r√©elle des capacit√©s"""
        try:
            print(f"\n‚öîÔ∏è Simulation de combat: {len(units_p1)} unit√©s P1 vs {len(units_p2)} unit√©s P2")
            
            # Cr√©ation des cartes de test
            test_cards = [
                Card("Carte Test 1", 1, "1", "sort", "Test effect"),
                Card("Carte Test 2", 2, "2", "cr√©ature", "Test effect")
            ]
            
            # S√©lection des h√©ros
            hero_p1 = heroes_p1[0] if heroes_p1 else Hero("H√©ros Test P1", "1", {"hp": 1000, "attack": 50, "defense": 20})
            hero_p2 = heroes_p2[0] if heroes_p2 else Hero("H√©ros Test P2", "2", {"hp": 1000, "attack": 50, "defense": 20})
            
            # Cr√©ation des joueurs
            player1 = Player("Joueur 1", test_cards.copy(), hero_p1, units_p1[:3])
            player2 = Player("Joueur 2", test_cards.copy(), hero_p2, units_p2[:3])
            
            # Cr√©ation du moteur de combat
            combat_engine = CombatEngine(player1, player2)
            
            # S'assurer que les unit√©s ont les attributs n√©cessaires
            for unit in player1.units + player2.units:
                if not hasattr(unit, 'owner'):
                    if unit in player1.units:
                        unit.owner = player1
                    else:
                        unit.owner = player2
                
                if not hasattr(unit, 'is_alive'):
                    unit.is_alive = lambda: getattr(unit, 'hp', 0) > 0
            
            # R√âINITIALISATION AGRESSIVE DES COOLDOWNS
            all_units = player1.units + player2.units
            self.force_reset_all_cooldowns(combat_engine, all_units)
            
            # Test des capacit√©s de chaque unit√©
            all_targets = all_units + [hero_p1, hero_p2]
            
            print(f"üéØ Cibles disponibles: {len(all_targets)} entit√©s")
            
            for unit in all_units:
                print(f"\nüîç Test des capacit√©s de {unit.name} (HP: {unit.hp}):")
                
                for ability in unit.abilities:
                    # R√©initialisation suppl√©mentaire avant chaque test
                    ability.current_cooldown = 0
                    
                    self.results["stats"]["total_abilities_tested"] += 1
                    
                    if self.test_ability_usage_in_combat(unit, ability, combat_engine, all_targets):
                        self.results["stats"]["successful_uses"] += 1
                    else:
                        self.results["stats"]["failed_uses"] += 1
                
                print(f"  üìä √âtat final: HP {unit.hp}, Effets temporaires: {len(unit.temporary_effects) if hasattr(unit, 'temporary_effects') else 0}")
            
            # Test des capacit√©s des h√©ros
            for hero, player_name in [(hero_p1, "P1"), (hero_p2, "P2")]:
                if hero.ability and hero.ability.name:
                    hero.ability.current_cooldown = 0
                    
                    print(f"\nüîç Test de la capacit√© du h√©ros {hero.name} ({player_name}):")
                    self.results["stats"]["total_abilities_tested"] += 1
                    
                    try:
                        success = combat_engine.use_ability(hero, hero.ability, hero)
                        
                        if success:
                            hero_ability_test = {
                                "unit": f"H√©ros {hero.name}",
                                "ability": hero.ability.name,
                                "ability_id": "hero_ability",
                                "status": "success",
                                "target_type": "self",
                                "damage": 0,
                                "cooldown": hero.ability.cooldown,
                                "real_usage": True
                            }
                            
                            self.results["combat_tests"].append(hero_ability_test)
                            self.results["stats"]["successful_uses"] += 1
                            print(f"  ‚úÖ Capacit√© h√©ros: OK")
                        else:
                            self.results["stats"]["failed_uses"] += 1
                            print(f"  ‚ùå Capacit√© h√©ros: √âchec")
                            
                    except Exception as e:
                        self.results["stats"]["failed_uses"] += 1
                        self.results["warnings"].append(f"Erreur capacit√© h√©ros {hero.name}: {e}")
                        print(f"  ‚ùå Capacit√© h√©ros: Erreur - {e}")
            
            # Test des interactions entre unit√©s
            self.test_unit_interactions(combat_engine, all_units)
            
            # Test des effets de passifs
            self.test_passive_effects(combat_engine, all_units, [hero_p1, hero_p2])
            
            self.results["stats"]["combat_simulations"] += 1
            self.results["success"].append(f"Combat simul√©: {len(units_p1)} vs {len(units_p2)} unit√©s")
            
            return True
            
        except Exception as e:
            self.results["errors"].append(f"Erreur simulation combat: {e}")
            traceback.print_exc()
            return False
    
    def test_unit_interactions(self, combat_engine, units):
        """Teste les interactions entre unit√©s"""
        try:
            print(f"\nüîÑ Test des interactions entre unit√©s...")
            
            for i, unit1 in enumerate(units):
                for j, unit2 in enumerate(units):
                    if i != j and unit1.hp > 0 and unit2.hp > 0:
                        hp_before = unit2.hp
                        
                        damage = max(1, unit1.attack - unit2.defense)
                        unit2.hp = max(0, unit2.hp - damage)
                        
                        hp_after = unit2.hp
                        actual_damage = hp_before - hp_after
                        
                        if actual_damage > 0:
                            self.results["combat_tests"].append({
                                "unit": unit1.name,
                                "ability": "Attaque basique",
                                "ability_id": "basic_attack",
                                "status": "success",
                                "target_type": "single_enemy",
                                "target": unit2.name,
                                "damage": damage,
                                "cooldown": 0,
                                "hp_change": actual_damage,
                                "effects_applied": [],
                                "real_usage": True
                            })
                            
                            print(f"  ‚öîÔ∏è {unit1.name} ‚Üí {unit2.name}: {actual_damage} d√©g√¢ts")
                        
                        unit2.hp = hp_before
                        
        except Exception as e:
            self.results["warnings"].append(f"Erreur test interactions: {e}")
    
    def test_passive_effects(self, combat_engine, units, heroes):
        """Teste les effets passifs"""
        try:
            print(f"\nüåü Test des effets passifs...")
            
            for unit in units:
                if hasattr(unit, 'passive_effects') and unit.passive_effects:
                    for passive in unit.passive_effects:
                        self.results["combat_tests"].append({
                            "unit": unit.name,
                            "ability": f"Passif: {passive.get('name', 'Unknown')}",
                            "ability_id": "passive_effect",
                            "status": "success",
                            "target_type": "self",
                            "target": unit.name,
                            "damage": 0,
                            "cooldown": 0,
                            "hp_change": 0,
                            "effects_applied": [f"Passif: {passive.get('effect', 'Unknown')}"],
                            "real_usage": True
                        })
                        
                        print(f"  üåü {unit.name}: Passif {passive.get('name', 'Unknown')} actif")
            
            for hero in heroes:
                if hasattr(hero, 'passive') and hero.passive:
                    self.results["combat_tests"].append({
                        "unit": f"H√©ros {hero.name}",
                        "ability": f"Passif: {hero.passive}",
                        "ability_id": "hero_passive",
                        "status": "success",
                        "target_type": "self",
                        "target": hero.name,
                        "damage": 0,
                        "cooldown": 0,
                        "hp_change": 0,
                        "effects_applied": [f"Passif h√©ros: {hero.passive}"],
                        "real_usage": True
                    })
                    
                    print(f"  üåü H√©ros {hero.name}: Passif {hero.passive} actif")
                    
        except Exception as e:
            self.results["warnings"].append(f"Erreur test passifs: {e}")
    
    def run_advanced_combat_tests(self):
        """Lance tous les tests de combat avanc√©s"""
        start_time = time.time()
        print("üöÄ D√©marrage des tests de combat avanc√©s...")
        
        # Cr√©ation des unit√©s et h√©ros r√©els
        real_units = self.create_real_units_for_testing()
        real_heroes = self.create_real_heroes_for_testing()
        
        if not real_units:
            print("‚ùå Aucune unit√© disponible pour les tests")
            return
        
        # S√©paration des unit√©s par √©l√©ment
        units_by_element = {}
        for unit in real_units:
            element = unit.element
            if element not in units_by_element:
                units_by_element[element] = []
            units_by_element[element].append(unit)
        
        print(f"\n‚öîÔ∏è Lancement des simulations de combat...")
        
        # Test 1: Combat entre unit√©s de m√™me √©l√©ment
        for element, units in units_by_element.items():
            if len(units) >= 2:
                units_p1 = units[:len(units)//2]
                units_p2 = units[len(units)//2:]
                
                self.simulate_combat_scenario(units_p1, units_p2, real_heroes[:1], real_heroes[1:2])
        
        # Test 2: Combat entre unit√©s d'√©l√©ments diff√©rents
        element_list = list(units_by_element.keys())
        for i in range(min(3, len(element_list))):
            element1 = element_list[i]
            element2 = element_list[(i + 1) % len(element_list)]
            
            if units_by_element[element1] and units_by_element[element2]:
                self.simulate_combat_scenario(
                    units_by_element[element1][:2], 
                    units_by_element[element2][:2],
                    real_heroes[:1], 
                    real_heroes[1:2]
                )
        
        end_time = time.time()
        execution_time = end_time - start_time
        
        # Affichage des r√©sultats
        self.display_advanced_results(execution_time)
    
    def display_advanced_results(self, execution_time):
        """Affiche les r√©sultats avanc√©s des tests"""
        print("\n" + "="*70)
        print("üìã R√âSULTATS DES TESTS DE COMBAT AVANC√âS")
        print("="*70)
        
        stats = self.results["stats"]
        print(f"üìä Statistiques:")
        print(f"   - Capacit√©s test√©es: {stats['total_abilities_tested']}")
        print(f"   - Utilisations r√©ussies: {stats['successful_uses']}")
        print(f"   - Utilisations √©chou√©es: {stats['failed_uses']}")
        print(f"   - Simulations de combat: {stats['combat_simulations']}")
        print(f"   - Effets valid√©s: {stats['effects_validated']}")
        print(f"   - Cooldowns r√©initialis√©s: {stats['cooldowns_reset']}")
        print(f"   - Temps d'ex√©cution: {execution_time:.2f} secondes")
        
        if stats['total_abilities_tested'] > 0:
            success_rate = (stats['successful_uses'] / stats['total_abilities_tested']) * 100
            print(f"   - Taux de succ√®s: {success_rate:.1f}%")
        
        # Affichage des succ√®s
        if self.results["success"]:
            print(f"\n‚úÖ Succ√®s ({len(self.results['success'])}):")
            for success in self.results["success"]:
                print(f"   - {success}")
        
        # Affichage des tests de combat
        if self.results["combat_tests"]:
            print(f"\n‚öîÔ∏è Tests de combat ({len(self.results['combat_tests'])}):")
            
            real_tests = [t for t in self.results["combat_tests"] if t.get("real_usage", False)]
            validation_tests = [t for t in self.results["combat_tests"] if not t.get("real_usage", False)]
            
            print(f"   üéØ Tests en conditions r√©elles ({len(real_tests)}):")
            for test in real_tests[:5]:
                target_info = f" ‚Üí {test.get('target', 'N/A')}" if test.get('target') else ""
                hp_change = f" (HP: {test.get('hp_change', 0)})" if test.get('hp_change', 0) != 0 else ""
                effects = f" [+{test.get('effects_validated', len(test.get('effects_applied', [])))} effets valid√©s]" if test.get('effects_validated') else ""
                print(f"     - {test['unit']}: {test['ability']}{target_info}{hp_change}{effects}")
            
            if len(real_tests) > 5:
                print(f"     ... et {len(real_tests) - 5} autres tests r√©els")
        
        # Affichage des validations d'effets
        if self.results["effect_validations"]:
            print(f"\nüîç Validations d'effets ({len(self.results['effect_validations'])}):")
            total_effects = sum(v.get('effects_count', 0) for v in self.results["effect_validations"])
            print(f"   - Total effets valid√©s: {total_effects}")
            
            # Top 5 des capacit√©s avec le plus d'effets
            top_effects = sorted(self.results["effect_validations"], key=lambda x: x.get('effects_count', 0), reverse=True)[:5]
            for effect in top_effects:
                print(f"     - {effect['ability']} ‚Üí {effect['target']}: {effect['effects_count']} effets")
        
        # Affichage des avertissements
        if self.results["warnings"]:
            print(f"\n‚ö†Ô∏è  Avertissements ({len(self.results['warnings'])}):")
            for warning in self.results["warnings"][:10]:
                print(f"   - {warning}")
            if len(self.results["warnings"]) > 10:
                print(f"   ... et {len(self.results['warnings']) - 10} autres")
        
        # Affichage des erreurs
        if self.results["errors"]:
            print(f"\n‚ùå Erreurs ({len(self.results['errors'])}):")
            for error in self.results["errors"][:10]:
                print(f"   - {error}")
            if len(self.results["errors"]) > 10:
                print(f"   ... et {len(self.results['errors']) - 10} autres")
        
        # Recommandations
        print(f"\nüí° Recommandations:")
        if stats['failed_uses'] > 0:
            print(f"   - Corriger les {stats['failed_uses']} √©checs d'utilisation")
        if stats['successful_uses'] == stats['total_abilities_tested']:
            print(f"   - üéâ Toutes les capacit√©s fonctionnent parfaitement!")
        
        # Analyse des probl√®mes
        if self.results["errors"]:
            print(f"\nüîß Probl√®mes d√©tect√©s:")
            damage_type_errors = [e for e in self.results["errors"] if "damage_type" in e]
            if damage_type_errors:
                print(f"   - {len(damage_type_errors)} capacit√©s avec damage_type manquant (corrig√© automatiquement)")
        
        if self.results["warnings"]:
            cooldown_warnings = [w for w in self.results["warnings"] if "cooldown" in w]
            if cooldown_warnings:
                print(f"   - {len(cooldown_warnings)} probl√®mes de cooldowns (r√©initialisation forc√©e)")
        
        print("="*70)

def main():
    """Fonction principale"""
    print("üéÆ Script de test de combat avanc√© en conditions r√©elles")
    print("="*70)
    
    try:
        tester = AdvancedCombatTester()
        tester.run_advanced_combat_tests()
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Test interrompu par l'utilisateur")
    except Exception as e:
        print(f"\n‚ùå Erreur fatale: {e}")
        traceback.print_exc()

if __name__ == "__main__":
    main()
